package com.cafecommand.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.cafeprojF.www.CommentBoxDAO;
import com.cafeprojF.www.CommentBoxDTO;
import com.cafeprojF.www.MenutableInfoDAO;
import com.cafeprojF.www.MenutableInfoDTO;

public class ListCommand implements Command{

	@Override
	public void excute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");		
		HttpSession session = request.getSession();
		
		MenutableInfoDAO dao = MenutableInfoDAO.getMenutableInfoDAO();
		
		
		int cLimitPostResult = 0;
		int cChangePageResult = 0; //기본 값 0.
		int cPagePosResult = 0;
		//초기 값 0./ 1-첫 실행 / 2-수치 설정 / -1 lp에러.
		cLimitPostResult = calChangeLimitPost(request, session);
		
		System.out.println("cLimitPostResult :"+cLimitPostResult);
		//게시글 표시 제한 수(변경 여부 확인 불가능)
		if(cLimitPostResult == -1) {
			System.out.println("ListCommand - calLimitPostResult: data(isChangeLimitPost) error.");
		}
		//메소드 작동 안 함.
		else if(cLimitPostResult == 0) {
			System.out.println("ListCommand - calLimitPostResult: dont't work. check please.");
		}
		//첫 실행
		else if(cLimitPostResult == 1) {
			System.out.println("cLimitPost 1");
			cChangePageResult = checkChangePage(request);
			
			cPagePosResult = calPagePosValues(session, request, 15, dao);
		}
		else if(cLimitPostResult == 2){
			cChangePageResult = checkChangePage(request);
			
			if(cChangePageResult != 1) {
				cPagePosResult = calPagePosValues(session, request, 1, dao);
			}			
		}
		else if(cLimitPostResult == 3) {
			System.out.println("=========changePage=========");
			cChangePageResult = checkChangePage(request);			
			if(cChangePageResult != 1) {
				cPagePosResult = calPagePosValues(session, request, 2, dao);
			}			
		}
		//게시글 표시 제한 수 변경 있음.	
		
		
	
		if(cPagePosResult == 0) {
			System.out.println("ListCommand - calPagePosResult: dont't work. check please.");
		}
		else {
			System.out.println("ListCommand - calPagePosResult: work done!");
		}
		
			CommentBoxDAO boxdao = CommentBoxDAO.getBox();		
			ArrayList<CommentBoxDTO> boxList = boxdao.selectAllBox();
			session.setAttribute("boxList", boxList);
			
		
		//테이블, 댓글 정보 초기화
		clearViewData(session);
		
		String subTableKind = request.getParameter("subTableKind");
		System.out.println("=====subTableKind:"+subTableKind);
		if(subTableKind!=null && subTableKind!="") {
			PrintWriter out = response.getWriter();
			out.println("<script>location.href='showKindList.jsp'</script>");			
		}
		else {
			response.sendRedirect("showList.jsp");
		}
	
	}
	//게시글 표시 제한 수 변경 여부에 따른 메소드 실행.
	private int calChangeLimitPost(HttpServletRequest request, HttpSession session) {
		int result = 0;		//초기 값 0./ 1-첫 실행 / 2-수치 설정 / -1 lp에러.
		String isChangeLimitPost = null; // 기본 게시글 출력 제한 수 변경 여부 확인
		int limitPostPrint = 15; // 기본 게시글 출력 제한 수 = 15			
		
		isChangeLimitPost = (String)request.getParameter("isChangeLimitPost");
					System.out.println("cLP is :"+isChangeLimitPost);
		//리스트 첫 실행.
		if( isChangeLimitPost==null || isChangeLimitPost.equals("") ) {
			session.setAttribute("limitPostPrint", limitPostPrint);
			result = 1;	
		}
		else if(isChangeLimitPost.equals("change")){
			result = 3;
			return result;
		}
		else {
			String tempNum = (String)request.getParameter("limitPostPrint");
			System.out.println("limitPostPrintData:"+tempNum);
			if( (tempNum!=null)) {			
				result = 2;			
			}
			//게시글 제한 수치 없는 경우.
			else {				
				result = -1;		
			}
		}
		return result;
	}
	private int checkChangePage(HttpServletRequest request) {			
		String isChangePage = null; // 현재 페이지 변경 여부 확인
		isChangePage = (String)request.getParameter("isChangePage");
		
		//페이지가 바뀌지 않은 경우.
		if(isChangePage=="" || isChangePage==null) {					
			return 1;
		}		
		//페이지가 바뀐 경우.
		else if(isChangePage.equals("pageChange")){						
			return 2;			
		}
		else if(isChangePage.equals("noChange")) {
			return 3;
		}
		else {
			return -1;
		}
	}
	private int calPagePosValues(HttpSession session, HttpServletRequest request,  int mode, MenutableInfoDAO dao) {
		
		int curPagePos=1;
		if(request.getParameter("curPagePos")!=null) {
			curPagePos = Integer.parseInt(request.getParameter("curPagePos"));
		}
		int listSize = dao.countPost();
		boolean flag = false;
		boolean firstLoad = false;
		int limitPostPrint = 0;
		if(request.getParameter("limitPostPrint")!=null) {
			limitPostPrint =Integer.parseInt(request.getParameter("limitPostPrint"));
		}
		else {
			limitPostPrint = 15;
		}
		int lastPageIdx = 0;	// 마지막 페이지 서수
		if(mode == 15) {
			System.out.println("first Page start");
			curPagePos = 1;
			String subTableKind = request.getParameter("subTableKind");
			
			if(subTableKind!=null) {
				session.setAttribute("subTableKind", subTableKind);
			}			
			else {
				ArrayList<MenutableInfoDTO> list = dao.selectBoard();
				session.setAttribute("list", list);
			}
			session.setAttribute("curPagePos", curPagePos);
			session.setAttribute("limitPostPrint", limitPostPrint);
			session.setAttribute("isReload", false);
			
			flag = true;
			firstLoad = true;
		}
		else if(mode==2) {
			System.out.println("this Page postLimit change start");
			if(listSize!=0) {
				int tempPageLimit = Integer.parseInt(request.getParameter("limitPostPrint"));
				session.setAttribute("limitPostPrint", tempPageLimit);
				flag = true;							
			}
			//불러온 게시글 리스트 데이터가 없는 경우
			else {				
				flag = false;
				lastPageIdx = 1;
				
				session.setAttribute("lastPageIdx", String.valueOf(lastPageIdx));
				session.setAttribute("curPagePos", 1);
				
			}
			
		}
		else {
			System.out.println("some Page start");
			if(listSize!=0) {
				flag = true;							
			}
			//불러온 게시글 리스트 데이터가 없는 경우
			else {				
				flag = false;
				lastPageIdx = 1;
				
				session.setAttribute("lastPageIdx", String.valueOf(lastPageIdx));
				session.setAttribute("curPagePos", 1);
			}
		}
		if(flag){
			System.out.println("cal Page pos start");
			int remainingNumber = 0;
			//마지막 번호 계산
			//총 데이터 수 나누기(/) 게시글 제한 수
			remainingNumber = listSize%limitPostPrint;
			System.out.println("remainNum:"+remainingNumber);
			if(remainingNumber != 0) {
				lastPageIdx = (listSize/limitPostPrint)+1;				
				session.setAttribute("lastPageIdx", lastPageIdx);
			}
			else if(remainingNumber == 0) {
				lastPageIdx = (listSize/limitPostPrint);
				
				session.setAttribute("lastPageIdx", lastPageIdx);
			}	
			remainingNumber = (listSize / limitPostPrint)+1;
			int startSelectPoint = 0;
			int lastSelectPoint = 0;
			System.out.println("curPagePos:"+curPagePos);
			System.out.println("ramainNum:"+remainingNumber);
			if(curPagePos == 1) {
				startSelectPoint = listSize-limitPostPrint;
				lastSelectPoint = listSize;
			}
			else if(curPagePos == lastPageIdx) {
				startSelectPoint = (limitPostPrint*(remainingNumber-curPagePos));
				lastSelectPoint = listSize;
			}
			else {
				startSelectPoint = (limitPostPrint*(remainingNumber-curPagePos));
				lastSelectPoint = (limitPostPrint*(remainingNumber-(curPagePos-1))-1);
				
			}
			
			
			if(!firstLoad) {
				String subTableKind = request.getParameter("subTableKind");
				String isPageKind = request.getParameter("isPageKind");
				if(subTableKind!=null) {
					session.setAttribute("subTableKind", subTableKind);
					session.setAttribute("curPagePos", 1);
				}
				else if(isPageKind!=null) {
					session.setAttribute("isPageKind", isPageKind);
					/* 검색 페이지에서 검색 종류별 메시지를 받아서 그에 맞춰 메소드를 실행.
					 * 이에 맞는 글 리스트와 댓글 박스를 보냄. */
				}
				else {
					ArrayList<MenutableInfoDTO> list = dao.selectThatBoard(startSelectPoint, lastSelectPoint);
					session.setAttribute("list", list);
				}
			}
			ArrayList<MenutableInfoDTO> allList = new ArrayList<>();
			allList = dao.selectBoard();
			session.setAttribute("curPagePos", curPagePos);
			session.setAttribute("isReload", true);		
			session.setAttribute("allList", allList);
			System.out.println("ListCommand curPagePos:"+curPagePos);
			System.out.println("listSize : "+listSize);
			System.out.println("lastPageIdx:"+lastPageIdx);
			
			
			
			return 1;
		}
		return 0;
	}
	
	private void clearViewData(HttpSession session) {	
		 session.removeAttribute("contentNo"); session.removeAttribute("extraTag");
		 session.removeAttribute("subTableTag");
		 session.removeAttribute("isNoticeThisOrAll");
		 session.removeAttribute("title"); session.removeAttribute("writer");
		 session.removeAttribute("texts"); session.removeAttribute("hitList");
		 
		 session.removeAttribute("comment_writer");
		 session.removeAttribute("comment_texts");
		 session.removeAttribute("comment_date");
		 session.removeAttribute("comment_groupNo");
		 session.removeAttribute("comment_subNo");
		 session.removeAttribute("comment_indentNo");
	}
	
	
}
