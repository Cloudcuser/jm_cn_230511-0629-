package com.cafeprojF.www;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.*;	

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.cafeprojF.www.CafememberInfoDTO;

@WebServlet("/CafememberInfoDAO")
public class CafememberInfoDAO extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	
	
	
	private final String sId = "root";
	private final String sPw = "1234";
	private final String url = "jdbc:mysql://localhost:3306/nicedb?serverTimezone=UTC";
	private final String driver = "com.mysql.cj.jdbc.Driver";
    public CafememberInfoDAO() {
        super();
        try {
        	Class.forName(driver);
        }
        catch(ClassNotFoundException e) {
        	System.out.println("멤버DAO : 드라이버 로드 실패");
        }
        
    }
	public ArrayList<CafememberInfoDTO> selectBoard(){
		String query = "select * from cafememberInfo";
		ArrayList<CafememberInfoDTO> list = new ArrayList<>();
		try 
			(
				Connection conn = DriverManager.getConnection(url, sId, sPw);
				PreparedStatement pstmt = conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();
			)			
		{
			System.out.println("멤버DAO select : 커넥션 객체 생성 성공");
			
			while(rs.next()) {
				CafememberInfoDTO cmiDTO = new CafememberInfoDTO();
				cmiDTO.setId(rs.getString("id"));
				cmiDTO.setPw(rs.getString("pw"));
				cmiDTO.setNickname(rs.getString("nickname"));
				cmiDTO.setHobby(rs.getString("hobby"));
				cmiDTO.setRegDate(rs.getString("regDate"));
				cmiDTO.setLastComeDate(rs.getString("lastComeDate"));
				cmiDTO.setAcntFindQuestion(rs.getString("acntFindQuestion"));
				cmiDTO.setAnctFindAnswer(rs.getString("acntFindAnswer"));
				cmiDTO.setIsStaff(rs.getInt("isStaff"));
				
				list.add(cmiDTO);
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	public CafememberInfoDTO selectLog(String inId, String inPw){
		String query = "select * from cafememberInfo";
		CafememberInfoDTO cmiDTO = new CafememberInfoDTO();
		boolean result = false;
		
		try 
			(
				Connection conn = DriverManager.getConnection(url, sId, sPw);
				PreparedStatement pstmt = conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery();
			)			
		{
			System.out.println("멤버DAO select login: 커넥션 객체 생성 성공");
			
			while(rs.next()) {				
				cmiDTO.setId(rs.getString("id"));
				cmiDTO.setPw(rs.getString("pw"));
				cmiDTO.setNickname(rs.getString("nickname"));
				cmiDTO.setHobby(rs.getString("hobby"));
				cmiDTO.setRegDate(rs.getString("regDate"));
				cmiDTO.setLastComeDate(rs.getString("lastComeDate"));
				cmiDTO.setAcntFindQuestion(rs.getString("acntFindQuestion"));
				cmiDTO.setAnctFindAnswer(rs.getString("acntFindAnswer"));
				String priv = rs.getString("isStaff");
				int chkPriv=0;
				if(priv.equals("none")){
					chkPriv=1;
				}
				else
					chkPriv=2;
				
				cmiDTO.setIsStaff(chkPriv);				
				System.out.println("cmiDTO id:"+cmiDTO.getId());
				System.out.println("inID :"+inId);
				System.out.println("cmiDTO pw:"+cmiDTO.getPw());
				System.out.println("inPW :"+inPw);
				if( (cmiDTO.getId().equals(inId))&& (cmiDTO.getPw().equals(inPw)) ) {
					result = true;
					String tempId = cmiDTO.getId();
					System.out.println("멤버DAO select login : 일치하는 회원 정보 확인, "+result);
					query = "update CafememberInfo set lastComeDate=current_timestamp where id='"+tempId+"'";
					return cmiDTO;
				}
			}						
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		System.out.println("멤버DAO select login : 일치하는 회원 정보 확인, "+result);
		return cmiDTO=null;
		
	}
	
    public int insertInfo(CafememberInfoDTO cmiDTO) {
    	String query = "insert into cafememberinfo(id, pw, nickname,"+
    			"hobby, acntFindQuestion, acntFindAnswer, isStaff) value(?,?,?,?,?,?,?)";
    	int result=0;
    	try 
		(
			Connection conn = DriverManager.getConnection(url, sId, sPw);
			PreparedStatement pstmt = conn.prepareStatement(query);)
		{
    		System.out.println("멤버DAO : DB 입력 메소드");
    		pstmt.setString(1, cmiDTO.getId());
    		pstmt.setString(2, cmiDTO.getPw());
    		pstmt.setString(3, cmiDTO.getNickname());
    		pstmt.setString(4, cmiDTO.getHobby());
    		pstmt.setString(5, cmiDTO.getAcntFindQuestion());
    		pstmt.setString(6, cmiDTO.getAnctFindAnswer());
    		pstmt.setInt(7, cmiDTO.getIsStaff());
    		
    		System.out.println("멤버DAO : DB 입력 메소드2 execute");
    		result = pstmt.executeUpdate();
		}
    	catch (SQLException e) {
    		e.printStackTrace();
		}
		return result;
    	
    }
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}

}
